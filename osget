#! /usr/bin/env bash

#uncomment for debugging
#set -x

#always use an absolute path for configuration directory
#if you use a relative path you can only run osget from the directory the script is in.
if [ -z "$OSDEV_CONFIGURATION_DIR"  ]; then
	readonly CONFIGURATION_DIR="/etc/osget"
else
	readonly CONFIGURATION_DIR="$OSDEV_CONFIGURATION_DIR"
fi

VERSION="1.3"

# shellcheck source=/etc/osget/osget.conf
source $CONFIGURATION_DIR/osget.conf

show_help () {
cat << EOF
osget [OPTIONS] [OPERATING_SYSTEM1] {OPERATING_SYSTEM2] ...
osget is a command line utility to easily download different operating systems

--help or -h            Shows this help message.
--version or -v         Shows the current program version.
--list or -l            Shows a list of all available operating systems including different releases and versions.
--listosnames or -o	Shows a list of all available operating systems by their generic names
			(ie Debian and not debian-11.0.0-amd64-netinst etc.)
--information or -i     Shows general information and description of the operating system.
--directory or -d       Specify directory to download to. Osget defaults to downloading to current directory.
                        Directory can also be specified in the configuration file.
--search or -s		Search from all available operating system names.
--torrent or -t		Use bittorrent to download.
--update or -u		Update the repository of operating systems available to download from an online source.

EXAMPLE: osget -d ~/Downloads/ debian-11.0.0-amd64-netinst
You can also use the generic names of Operating systems which will download the most common version.
"osget ubuntu" will download the most recent long term release. 
This is determined with a "default" symlink in the oslist subdirectories.

EOF
}

list_osnames () {
	ls -1 $CONFIGURATION_DIR/oslist/
}

search () {
        find "$CONFIGURATION_DIR"/oslist/* -type f -print|awk  -F$CONFIGURATION_DIR '{print $2}'|cut -f 4 -d/|grep -v "txt"|grep -i "$1"
	ls -1 "$CONFIGURATION_DIR"/oslist/ |grep -i "$1"
}

list () {
        find "$CONFIGURATION_DIR"/oslist/* -type f -print|awk  -F$CONFIGURATION_DIR '{print $2}'|cut -f 4 -d/|grep -v "txt"
}

checkfor_btclient () {
        TRANSMISSION_CLI="$(whereis -b transmission-cli|awk -F" " '{print $2}')"
	if [ "$TRANSMISSION_CLI" = "" ];then
		echo "WARNING: Transmission-cli isn't installed. If you wish to download via bittorrent please install it."
	fi
}

get_information () {
	local osname=$(find $CONFIGURATION_DIR/oslist/ -iname "$1")
	
	if [ -f "$osname" ];then
		local path=$(dirname $osname)
		cat $path/osinfo.txt
		exit
	fi

	if [ ! -d "$osname" ];then
		echo "No operating system in $CONFIGURATION_DIR/oslist/ found with that name."
		echo "Run: osget --help or -h for help."
		exit
	fi

	if [ ! -e "$osname"/osinfo.txt ];then
		echo "Unfortunately the "$osname"/osinfo.txt file hasn't been created yet."
		exit
	else
		cat $osname/osinfo.txt
		exit
	fi

	}

validate_url() {
	[[ `wget -S --spider $1  2>&1 | grep 'HTTP/1.1 200 OK'` ]]
}


update_oslist () {
if [ -w "$CONFIGURATION_DIR/oslist/" ];then
	for (( i=1 ; ; i++ )); do
		n="OSLIST_REPOSITORY${i}"                # the name of var
		[ "${!n+x}" ] || break          # see if it exists
		
		echo "-------------------------------------------------"	
		echo "Updating mirror $n to $CONFIGURATION_DIR/oslist/"	
		echo "-------------------------------------------------"	
		wget -r -nH -q --show-progress --no-parent --retr-symlinks=no --directory-prefix=$CONFIGURATION_DIR/ $(eval echo \$OSLIST_REPOSITORY${i}/) 
		echo "-------------------------------------------------"	
		echo "DONE!"
		echo "-------------------------------------------------"	
	done
else
	echo "$USER does not have permission to write to the $CONFIGURATION_DIR/oslist/ filesystem location."
	exit
fi
}

download_iso () {
	if ( [ "$USE_TORRENT" = "1" ] && [ "$MAGNET" != "" ] && [ "$DOWNLOAD_DIR" != "" ] );then
		transmission-cli -w "$DOWNLOAD_DIR" "$MAGNET"
	fi

	if ( [ "$USE_TORRENT" = "1" ] && [ "$TORRENT" != "" ]&& [ "$DOWNLOAD_DIR" != "" ] );then
		transmission-cli -w "$DOWNLOAD_DIR" "$TORRENT"
	fi

	if ( [ "$USE_TORRENT" = "1" ] && [ "$MAGNET" != "" ] );then
		transmission-cli -w $(pwd) "$MAGNET"
	fi

	if ( [ "$USE_TORRENT" = "1" ] && [ "$TORRENT" != "" ] );then
		transmission-cli -w $(pwd) "$TORRENT"
	else
		if [ "$DOWNLOAD_DIR" = "" ];then
			wget -c "$URL"
		else
			wget -c "$URL" -P "$DOWNLOAD_DIR"
		fi
	fi
}

sanity_check_configfile () {
	if [ "$MAGNET" = "" ];then
		echo "WARNING: No magnet link in $file."
	fi
	
	if [ "$TORRENT" = "" ];then
		echo "WARNING: No torrent link in $file."
	fi


	if [ "$URL1" = "" ];then
		echo "WARNING: Url is missing from $file. Something is wrong with the configuration file."
		exit
	fi
}

verify_file () {
	file=${URL##*/}

	if [ "$DOWNLOAD_DIR" = "" ];then	
		if [ "$SHA512SUM" = "$(sha512sum $file|awk '{print $1}')" ];then
			echo "Checksum of downloaded file matches."
		elif [ "$SHA256SUM" = "$(sha256sum $file|awk '{print $1}')" ];then
			echo "Checksum of downloaded file matches."
		elif [ "$SHA1SUM" = "$(sha1sum $file|awk '{print $1}')" ];then
			echo "Checksum of downloaded file matches."

		else
			echo "WARNING: This file could be a fake!" 
			echo "Checksum of downloaded file does NOT match the checksum on record!"
		fi
	else
		if [ "$SHA512SUM" = "$(sha512sum $DOWNLOAD_DIR/$file|awk '{print $1}')" ];then
			echo "Checksum of downloaded file matches."
		elif [ "$SHA256SUM" = "$(sha256sum $DOWNLOAD_DIR/$file|awk '{print $1}')" ];then
			echo "Checksum of downloaded file matches."
		elif [ "$SHA1SUM" = "$(sha1sum $DOWNLOAD_DIR/$file|awk '{print $1}')" ];then
			echo "Checksum of downloaded file matches."

		else
			echo "WARNING: This file could be a fake!" 
			echo "Checksum of downloaded file does NOT match the checksum on record!"
		fi
	fi
}

#Make sure that the configure directory exists and if it doesn't create it.
mkdir -p $CONFIGURATION_DIR

#check if help is being sought or if there are any arguments
if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$#" -eq "0" ];then
        show_help
	checkfor_btclient
	exit
fi


OPTS=$(getopt -o hvloui:d:s:t: --long help,version,list,listosnames,update,information:,directory:,search:,torrent: -n 'osget' -- "$@")
eval set -- "$OPTS"

while true; do
	case "$1" in
		-h | --help ) show_help; shift ;;
		-v | --version ) echo $VERSION; shift ;;
		-l | --list ) list; shift ;;
		-o | --listosnames ) list_osnames; shift ;;
		-u | --update ) update_oslist; shift ;;
		-i | --information ) get_information "$2"; shift 2 ;;
		-d | --directory ) DOWNLOAD_DIR="$2"; shift 2 ;;
		-s | --search ) search "$2"; shift 2 ;;
		-t | --torrent ) USE_TORRENT="1"; shift ;;
		-- ) shift; break;;
		* ) break;;
	esac
done

checkfor_btclient

for par in "$@";do
        for file in $(find $CONFIGURATION_DIR/oslist/* -type f -print|awk -F$CONFIGURATION_DIR '{print $2}'|cut -f 4 -d/|grep -v "txt");do
                osname=$(find "$CONFIGURATION_DIR" -name "$file"|awk -Foslist '{print $2}'|awk -F/ '{print $2}')
                if [ "${par,,}" = "${file,,}" ];then
			MATCH_FOUND="1"
                        source "$CONFIGURATION_DIR/oslist/$osname/$file"

			sanity_check_configfile
                        
			if [ "$DOWNLOAD_DIR" != "" ];then
				echo "Downloading $file to $DOWNLOAD_DIR"
			else
				echo "Downloading $file to current directory: $(pwd)"
			fi
			
			for (( i=1 ; ; i++ )); do
				n="URL${i}"                # the name of var
				[ "${!n+x}" ] || break          # see if it exists
				if (validate_url ${!n});then
					URL="${!n}"
					break
				else
					echo "WARNING: $n in $CONFIGURATION_DIR/oslist/$osname/$file is either not a valid url or it's down. Trying next mirror."
				fi
			done

			download_iso
			verify_file
                fi
        done

	for file in $(find $CONFIGURATION_DIR/oslist/* -type f -print|awk -F$CONFIGURATION_DIR '{print $2}'|cut -f 3 -d/|uniq);do
                osname=$(find "$CONFIGURATION_DIR" -name "$file"|awk -Foslist '{print $2}'|awk -F/ '{print $2}')
                if [ "${par,,}" = "${osname,,}" ];then
			MATCH_FOUND="1"
			source "$CONFIGURATION_DIR"/oslist/"$osname"/default

			sanity_check_configfile

			if [ "$DOWNLOAD_DIR" != "" ];then
				echo "Downloading $file to $DOWNLOAD_DIR"
			else
				echo "Downloading $file to current directory: $(pwd)"
			fi
			
			for (( i=1 ; ; i++ )); do
				n="URL${i}"                # the name of var
				[ "${!n+x}" ] || break          # see if it exists
				if (validate_url ${!n});then
					URL="${!n}"
					break
				else
					echo "WARNING: $n in $CONFIGURATION_DIR/oslist/$osname/default is either not a valid url or it's down. Trying next mirror."
				fi
			done

			download_iso
			verify_file
                fi
        done
	
	if [ "$MATCH_FOUND" != "1" ];then
		echo "No operating system in $CONFIGURATION_DIR/oslist/ found with that name."
		echo "Run: osget --help or -h for help."
	fi
done

